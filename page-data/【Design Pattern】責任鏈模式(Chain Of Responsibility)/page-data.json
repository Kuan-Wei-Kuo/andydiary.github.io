{"componentChunkName":"component---src-templates-blog-post-js","path":"/【Design Pattern】責任鏈模式(Chain Of Responsibility)/","result":{"data":{"site":{"siteMetadata":{"title":"Andy Diary"}},"markdownRemark":{"id":"281f5d35-6a6f-5b61-8458-61c497efab8e","excerpt":"責任鏈模式(Chain Of Responsibility) 責任鏈模式基本上是由一個命令對象與處理對象組成，每一個處理對象都將執行一個命令並且呼叫下一個處理對象，以達到鏈結的效果。 例子 我們需要一個處理器介面類別 接下來，我們需要建立幾個簡單的處理器，並且印出相關字串。 我們有了One、Two、Three…","html":"<h2>責任鏈模式(Chain Of Responsibility)</h2>\n<p>責任鏈模式基本上是由一個命令對象與處理對象組成，每一個處理對象都將執行一個命令並且呼叫下一個處理對象，以達到鏈結的效果。</p>\n<h2>例子</h2>\n<p>我們需要一個處理器介面類別</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\r\n\t\r\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下來，我們需要建立幾個簡單的處理器，並且印出相關字串。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OneHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token annotation punctuation\">@Override</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token annotation punctuation\">@Override</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreeHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token annotation punctuation\">@Override</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Three...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們有了One、Two、Three三種處理器，接下來需要創建鏈的基礎類別。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Chain</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Handler</span> handler<span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Chain</span> nextChain<span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Handler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNextChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Chain</span> nextChain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextChain <span class=\"token operator\">=</span> nextChain<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nextChain <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t\tnextChain<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由鏈的基礎類別我們可以看到，我們使用一個處理器以及一個鏈組成一個責任鏈類別，當然這些類別可以有更多的客製化，例如在execute函數中加入其他參數，又或者處理器可以放在exexute中進行，利用這種方式即可將context進行鏈結。</p>\n<p>不過這個範例中，我們用簡單易懂的方式進行即可，基本上就是處理器觸發時，會回傳一個布林值，該值將會影響是否要繼續進行下一個鏈結的觸發。</p>\n<p>接下來就讓我們展示如何使用這個鏈結。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppRun</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">Chain</span> chain1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OneHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\r\n\t\t<span class=\"token class-name\">Chain</span> chain2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TwoHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token class-name\">Chain</span> chain3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreeHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\tchain1<span class=\"token punctuation\">.</span><span class=\"token function\">setNextChain</span><span class=\"token punctuation\">(</span>chain2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\tchain2<span class=\"token punctuation\">.</span><span class=\"token function\">setNextChain</span><span class=\"token punctuation\">(</span>chain3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\r\n\t\tchain1<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們可以觀察到，chain1~chain3都建立了各自的實例，並且以chain1->chain2->chain3的方式進行鏈結，運行結果如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">One...\r\nTwo...\r\nThree...</code></pre></div>\n<h2>結論</h2>\n<p>儘管責任鏈模式有許多優點，例如鬆散耦合、職責分配靈活、對象簡化等等，可是我們不得不注意一些事項，避免日後造成系統上的問題。\r\n基本上責任鏈模式很容易因為不注意的情況，導致遞迴的狀況發生，要注意使用。\r\n為了保持鏈的一致性，盡量保持一個處理器與命令對象來組成一個鏈。\r\n鏈結過多時，不易進行維護，導致維護成本較高。\r\n由於鏈結過多時，一旦發生Deep stack traces，對於效能是有影響的。</p>\n<h2>參考</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern\">https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern</a></p>\n<p><a href=\"https://www.baeldung.com/chain-of-responsibility-pattern\">https://www.baeldung.com/chain-of-responsibility-pattern</a></p>","frontmatter":{"title":"【Design Pattern】責任鏈模式(Chain Of Responsibility)","date":"2022-12-03","description":null}},"previous":{"fields":{"slug":"/CSRF Token 在 Stateless 中所造成的競爭條件/"},"frontmatter":{"title":"CSRF Token 在 Stateless 中所造成的競爭條件"}},"next":{"fields":{"slug":"/【演算法筆記】快速排序(Quicksort)/"},"frontmatter":{"title":"【演算法筆記】快速排序(Quicksort)"}}},"pageContext":{"id":"281f5d35-6a6f-5b61-8458-61c497efab8e","previousPostId":"e6301c50-d77a-59db-bda5-dffd3f3b5365","nextPostId":"76ab272f-252f-5714-a516-d0d12ac1985b"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}