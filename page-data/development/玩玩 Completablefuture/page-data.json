{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/玩玩 Completablefuture/","result":{"data":{"site":{"siteMetadata":{"title":"Andy Diary"}},"markdownRemark":{"id":"cce928c7-2e52-5191-bd4b-6acbfa8634fc","excerpt":"Git項目位置: https://github.com/Kuan-Wei-Kuo/completablefuture-demo Java 8 開始引入 Completablefuture，基本上就是針對 Future 進行加強，我們可以在非同步任務完成或發生異常時，自動調用 Callback…","html":"<ul>\n<li>Git項目位置: <a href=\"https://github.com/Kuan-Wei-Kuo/completablefuture-demo\">https://github.com/Kuan-Wei-Kuo/completablefuture-demo</a></li>\n</ul>\n<p>Java 8 開始引入 Completablefuture，基本上就是針對 Future 進行加強，我們可以在非同步任務完成或發生異常時，自動調用 Callback 方法，為何我稱為 Callback 呢 ? 這不得不說...非常的 Functional，接下來讓我們看看原因為何。</p>\n<h2>來一個簡單的玩意</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example01</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future1 -> \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future1 is done\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        future1<span class=\"token punctuation\">.</span><span class=\"token function\">thenAccept</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thenAccept1 -> \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        future1<span class=\"token punctuation\">.</span><span class=\"token function\">thenAccept</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thenAccept2 -> \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> future1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這個範例，我們建立了一個 future1 物件，裡面我們等待了 2 秒，並且丟出相關字串，結果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">future1 -&gt; ForkJoinPool.commonPool-worker-1\r\nthenAccept1 -&gt; future1 is done\r\nthenAccept2 -&gt; future1 is done\r\nfuture1 is done</code></pre></div>\n<p>接下來讓我們看看細節， thenAccept 是一個同步方法並且會回傳 future1 的結果，也就是 future1 is done，而因為我們針對 future1 建立了兩個 thenAccept 方法，因此我們將會得到上面的答案。</p>\n<p>我們知道為何會這樣列印出字串，那如果有一天我們的 thenAccept 需要使用非同步呢? 那麼也很簡單，我們可以改成 thenAcceptAsync 就變成非同步了，讓我們看看結果會變成如何。</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">future1 -&gt; ForkJoinPool.commonPool-worker-1\r\nfuture1 is done\r\nthenAccept2 -&gt; future1 is done\r\nthenAccept1 -&gt; future1 is done</code></pre></div>\n<p>可以看到我們並沒有按照程式順序執行，也就代表我們非同步成功了，當然 future1 能接的也不只 thenAccept，Completablefuter 提供如 thenApplyAsync、thenRunAsync 等等方式，讓我們可以因應不同情境，建立更好的鏈結。</p>\n<h2>Oops! 發生錯誤</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example03</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future1 -> \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future1 is failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future1 is done\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future2 <span class=\"token operator\">=</span> future1<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionally</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exceptionally -> \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future1 occur exception\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們也知道，寫程式肯定要包含例外處理，在 Completablefuture 中也提供了一系列的錯誤處理方式，在這邊我們使用最簡單的 exceptionally 來實作，結果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">future1 -&gt; ForkJoinPool.commonPool-worker-1\r\nexceptionally -&gt; java.lang.RuntimeException: future1 is failure\r\nfuture1 occur exception</code></pre></div>\n<p>程式碼跟剛剛大同小異，但我們丟出了 RuntimeException 來讓我們運行失敗，來讓我們達成效果。而大家還記得我上述有說<strong>鏈結</strong>兩字，所以我們可以看到 future1.exceptionally 會丟出一個 CompletableFuture 物件，我們稱之為 future2，其錯誤處理很簡單的印出字串以及回傳處理結果，這是一個簡潔的使用方式。</p>\n<h2>誰先來的 Either</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example04</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Random</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        \r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future1 -> \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future1 is done\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future2 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future2 -> \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future2 is done\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future3 <span class=\"token operator\">=</span> future1<span class=\"token punctuation\">.</span><span class=\"token function\">applyToEitherAsync</span><span class=\"token punctuation\">(</span>future2<span class=\"token punctuation\">,</span> message <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future3 -> \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future3<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Either 基本上表示，在任一 CompletionStage 完成，就會往下執行 action，因此我們看看該範例，兩個 Stage Thread Sleep 時間不固定，誰先回來就會顯是誰的回傳值，假設我們跑了兩次，結果可能如下</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">T0:\r\nfuture1 -&gt; ForkJoinPool.commonPool-worker-1\r\nfuture3 -&gt; future1 is done\r\n\r\nT1:\r\nfuture2 -&gt; ForkJoinPool.commonPool-worker-2\r\nfuture3 -&gt; future2 is done</code></pre></div>\n<h2>全部一起來吧!</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example05</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Random</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        \r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future1 -> \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future1 is done\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future2 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future2 -> \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"future2 is done\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> future3 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span>future1<span class=\"token punctuation\">,</span> future2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> future4 <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span>future1<span class=\"token punctuation\">,</span> future2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future3<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future4<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有時候我們可能不會一步一步執行，我們可能想要一次執行全部並且等待，這時候就得使用到 allOf 了，若使用 allOf 將會等待所有 Future 回來才進行後續動作。反之，當我們今天想要任一個回來即可，則是使用 anyOf。</p>\n<p>按照上述的說明以及程式碼，我們一樣執行兩次看看，結果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">T0:\r\nfuture2 -&gt; ForkJoinPool.commonPool-worker-2\r\nfuture1 -&gt; ForkJoinPool.commonPool-worker-1\r\nnull\r\nfuture2 is done\r\n\r\nT1:\r\nfuture1 -&gt; ForkJoinPool.commonPool-worker-1\r\nfuture2 -&gt; ForkJoinPool.commonPool-worker-2\r\nnull\r\nfuture1 is done</code></pre></div>\n<p>可以看到使用 allOf 確實有等待全部完成，而 anyOf 得到的答案有可能會是不同的，看哪個 Future 先執行完成，則印出該字串。</p>\n<h2>結論</h2>\n<p>謝謝大家把文章看完，看完之後可以看到整體 Completablefuture 使用了許多 Function 介面來執行，這種方式體現了 Functional 的強大，我們可以利用這種方式建立更簡單明瞭的請求鏈結。</p>\n<p>當然，Completablefuture 的功能還不只如此，還有更多組合應用沒有說明到，可見這個特性之強大。</p>\n<h2>參考</h2>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1306581182447650\">https://www.liaoxuefeng.com/wiki/1252599548343744/1306581182447650</a><br>\r\n<a href=\"https://openhome.cc/Gossip/CodeData/JDK8/CompleteableFuture.html\">https://openhome.cc/Gossip/CodeData/JDK8/CompleteableFuture.html</a></p>","frontmatter":{"title":"玩玩 Completablefuture","date":"2023-04-01","description":null}},"previous":{"fields":{"slug":"/elk/要不要來點 ELK - Kibana/"},"frontmatter":{"title":"要不來點 ELK - Kibana"}},"next":{"fields":{"slug":"/java-concurrency/01/"},"frontmatter":{"title":"Java Concurrency #01 - Thread 的基礎觀念"}}},"pageContext":{"id":"cce928c7-2e52-5191-bd4b-6acbfa8634fc","previousPostId":"2eaa1d4d-90a7-5a05-9b0f-9e8f9ae4c775","nextPostId":"b39b73b4-0f00-5219-93af-07ef41070518"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}