{"componentChunkName":"component---src-templates-blog-post-js","path":"/redis/reset-counter-everyday/","result":{"data":{"site":{"siteMetadata":{"title":"Andy Diary"}},"markdownRemark":{"id":"b79f2a8d-c5b8-5ff2-83ba-3c93e31aa09b","excerpt":"Introduction 最近開發到一個需求，每次建立資料都會使用[日期]+[流水號]來進行編號，其中流水號每天都會進行刷新。想到這種需求，大家第一眼可能會想將流水號建立在資料庫，但安迪想偷懶，利用 Redis 的 incr、expire 功能來達成目標。 Code 稍微解釋一下程式碼，當呼叫 incr…","html":"<h2>Introduction</h2>\n<p>最近開發到一個需求，每次建立資料都會使用[日期]+[流水號]來進行編號，其中流水號每天都會進行刷新。想到這種需求，大家第一眼可能會想將流水號建立在資料庫，但安迪想偷懶，利用 Redis 的 incr、expire 功能來達成目標。</p>\n<h2>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> expireSeconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token class-name\">Long</span> sequence <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  \r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> sequence <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> expireSeconds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> sequence<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> \r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getExpireSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  calendar<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_MONTH</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  calendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  calendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  calendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECOND</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  calendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECOND</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeInMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>稍微解釋一下程式碼，當呼叫 incr 方法時，我們會使用一組 Key 與 Redis 通知，若查無 Key 則將會返回 1 並且建立 Key，反之則將返回新增後的值。</p>\n<p>當返回值後，我們就可以開始判斷，若 sequence 等於 1 的時候，也代表這筆 Key 是第一次建立，那我們將會設定其過期時間。</p>\n<p>也許有眼尖的夥伴會說，為何不先判斷 Redis 是否有 Key 在來進行初始化呢? 當然可以，但是動作將會拆成兩步驟，若今天系統為併發系統，那麼這個方式並不能保證原子性，這也是為何安迪選擇使用 Redis 來實作該功能，因為 Redis 的 incr 功能是原子性的，利用 incr、expire 兩種功能，我們就能快速地達到要求，這也算是安迪偷懶了一下。</p>\n<h2>結論</h2>\n<p>這次安迪簡單的分享這個方式，我相信有更多好的方式，但在目前專案的緊急階段，我選擇了可以讓我相對安全的快速交付功能。</p>\n<p>也許這麼說會得罪一些人，但我認為有時候工程師也需要停止爛漫，在工作中選擇當下最適合的解法即可，後續我們可以在使用私底下時間進行分析與研究，這是相對安全的方式，企業獲利與個人成長有時候是非常衝突的。</p>","frontmatter":{"title":"使用 Redis 將計數每天重置","date":"2023-08-21","description":null}},"previous":{"fields":{"slug":"/leetcode/LeetCode 2091. Removing Minimum and Maximum From Array/"},"frontmatter":{"title":"LeetCode 2091. Removing Minimum and Maximum From Array"}},"next":null},"pageContext":{"id":"b79f2a8d-c5b8-5ff2-83ba-3c93e31aa09b","previousPostId":"ad66b01f-353c-5367-828a-770e5c7b1122","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}