{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-concurrency/01/","result":{"data":{"site":{"siteMetadata":{"title":"Andy Diary"}},"markdownRemark":{"id":"b39b73b4-0f00-5219-93af-07ef41070518","excerpt":"在講解 Concurrency 時，我們有必要去理解 Thread 相關知識，因此在此篇文章中，我們講快速理解一遍關於 Thread 的那些事。 什麼是 Thread 要講 Thread 我們就得先談到 Process，我們每一個運行的程序就可稱為為 Process，而 Thread 是 Process…","html":"<p>在講解 Concurrency 時，我們有必要去理解 Thread 相關知識，因此在此篇文章中，我們講快速理解一遍關於 Thread 的那些事。</p>\n<h2>什麼是 Thread</h2>\n<p>要講 Thread 我們就得先談到 Process，我們每一個運行的程序就可稱為為 Process，而 Thread 是 Process 中的執行單位。不過這樣還是有點模糊，我們直接清楚的條列出來以下重點</p>\n<ul>\n<li>一個 Process 中可以包含一個或多個 Thread。</li>\n<li>不同的 Process 中是獨立的，且不可共享資源。</li>\n<li>同一 Process 中的不同 Thread 可以共享 Process 的資源。</li>\n</ul>\n<p>除了上述 Process 與 Thread 的說明，接下來我們也需要知道，JVM 與 Process 的關係，重點如下</p>\n<ul>\n<li>Process 其實就是一個運行的程序，當我們 JVM 啟動時，系統就會幫我們分配一個 Process，這個 Process 包含了 JVM 所需的資源，而我們也可以用 JVM 參數來限制 Process 記憶體的劃分。</li>\n<li>在 JVM 啟動時，我們會啟動一個 Main Thread 來進行應用程序的操作。</li>\n</ul>\n<h2>在 Java 中應用 Thread</h2>\n<p>若我們在 Java 裡面要應用 Thread 的話，大概可以包刮以下幾中方式</p>\n<ol>\n<li>繼承 Thread 類別</li>\n<li>實現 Runnable 介面</li>\n<li>使用 Callable 與 Future</li>\n<li>使用 CompletableFuture</li>\n</ol>\n<p>接下來我們就一一實現他。</p>\n<h3>1. 繼承 Thread 類別</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example01</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\r\n    \r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyThread running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Example01</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>直接繼承 Thread 的方式最為簡單，但我們並不建議使用 Thread 進行設計，原因有以下</p>\n<ul>\n<li>Java 不支持多重繼承，當我們設計好一個 Thread 時，也就代表我們無法繼續的擴展或者繼承其他類。</li>\n<li>Runnable 介面僅表示一個任務，我們很好的將邏輯分離於此處，這也意味著我們可以很好的重用任務。</li>\n<li>在 Java 中，當我們繼承了，也就代表我們要修改與改進行為，但往往我們繼承 Thread 僅進行 Runnable 的實現。</li>\n</ul>\n<p>除了上述三點，我相信還有一些大神可以找出更多點，但目前個人心得如上。</p>\n<h3>2. 實現 Runnable 介面</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example02</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\r\n    \r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyRunnable running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Example02</span> runnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到我們在 runnable 僅需實現 run 方法，並且邏輯更好的與 Thread 拆分，我今天甚至可以直接使用多個 Thread 來一起執行任務，又或者可以自己進行呼叫來重用任務。</p>\n<h3>使用 Callable 與 Future</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example03</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n    \r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> executor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Example03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for result...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這邊我們可以看到我們大名鼎鼎的 Future 了，在 Java 5 開始提供的 Future 可以讓我們進行任務等待，其實也就是阻塞式獲取執行結果。</p>\n<h3>使用 CompletableFuture</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example04</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">supplyAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        \r\n        future<span class=\"token punctuation\">.</span><span class=\"token function\">thenAcceptAsync</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"計算結果為：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"請稍等，計算結果正在計算中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這個例子中我們建立一個 CompletableFuture，並且其計算 1 + 2 結束後，會調用 thenAcceptAsync 來讓我們達成非阻塞式的計算，其運作結果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">請稍等，計算結果正在計算中...\r\n計算結果為：3</code></pre></div>\n<p>可以看到我們第一行打印的字樣為\"請稍等，計算結果正在計算中...\"，也就代表我們並沒有等待 future 結束，並且我們在另外一個 Thread 執行 thenAcceptAsync 內容。</p>\n<h2>結論</h2>\n<p>本篇文章簡單的介紹 Process、Thread、JVM 三者的關係，並且我們實作四種在 Java 中使用 Thread 的方法。在後續我們將進行對 Java Concurrency 更深入的研究與學習。</p>\n<h2>參考</h2>\n<p><a href=\"https://datacadamia.com/os/process/process\">https://datacadamia.com/os/process/process</a><br>\r\n<a href=\"https://medium.com/bucketing/java-concurrency-0-%E9%A0%90%E5%85%88%E7%9F%A5%E8%AD%98-338cd98604c2\">https://medium.com/bucketing/java-concurrency-0-%E9%A0%90%E5%85%88%E7%9F%A5%E8%AD%98-338cd98604c2</a><br>\r\n<a href=\"https://www.geeksforgeeks.org/main-thread-java/\">https://www.geeksforgeeks.org/main-thread-java/</a></p>","frontmatter":{"title":"Java Concurrency #01 - Thread 的基礎觀念","date":"2023-04-03","description":null}},"previous":{"fields":{"slug":"/development/玩玩 Completablefuture/"},"frontmatter":{"title":"玩玩 Completablefuture"}},"next":{"fields":{"slug":"/java-concurrency/02/"},"frontmatter":{"title":"Java Concurrency #02 - 可見性、原子性、有序性"}}},"pageContext":{"id":"b39b73b4-0f00-5219-93af-07ef41070518","previousPostId":"cce928c7-2e52-5191-bd4b-6acbfa8634fc","nextPostId":"683ec606-e12e-5047-9c6d-d917b75f5c21"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}