{"version":3,"file":"component---src-templates-tags-js-a0f7bde1d32f74f103b8.js","mappings":"uJA6BA,IA1Be,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,OACE,uBAAKC,UAAU,iBAAiB,oBAAmBF,GACjD,0BAAQE,UAAU,iBAChB,gBAAC,EAAAC,KAAI,CAACD,UAAU,eAAeE,GAAG,KAAKN,GAEvC,uBAAKI,UAAU,0BAEf,uBAAKA,UAAU,wBACb,gBAAC,EAAAC,KAAI,CAACD,UAAU,eAAeE,GAAG,KAAI,MACtC,gBAAC,EAAAD,KAAI,CAACD,UAAU,eAAeE,GAAG,SAAQ,MAC1C,gBAAC,EAAAD,KAAI,CAACD,UAAU,eAAeE,GAAG,UAAS,QAG/C,wBAAMF,UAAU,eAAeH,GAC/B,0BAAQG,UAAU,iBAAgB,MAC7B,IAAIG,MAAOC,cAAc,eAC5B,IACA,qBAAGC,KAAK,4BAA2B,WAEjC,C,+CCwBV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAEV,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEU,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBd,MAExC,OACE,gCACE,6BAAQe,EAAkBf,EAAK,MAAMe,EAAiBf,GACtD,wBAAMgB,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASjB,IACnC,wBAAMkB,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAN,EAAKG,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASjB,IACpC,wBAAMgB,KAAK,sBAAsBC,QAASJ,IACzCZ,EACA,C,6GCyBP,UA7Da,IAAqC,YAApC,YAAEoB,EAAW,KAAEC,EAAI,SAAEvB,GAAU,EAC3C,MAAM,IAAEwB,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAeF,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZF,EAAG,IAEdK,GAAYN,SAAU,QAAN,EAAJA,EAAMX,YAAI,OAAc,QAAd,EAAV,EAAYG,oBAAY,WAApB,EAAJ,EAA0Bd,QAAK,QAEjD,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAO4B,GACjC,2BACExB,UAAU,YACVyB,WAAS,EACTC,SAAS,6BAET,8BACE,0BAAKH,IAEP,+BACE,0BACGH,EAAMO,KAAI,IAAc,IAAb,KAAEC,GAAM,EAClB,MAAM,KAAEC,GAASD,EAAKE,QAChB,MAAElC,GAAUgC,EAAKG,YACvB,OACE,sBAAIC,IAAKH,GACP,gBAAC,EAAA5B,KAAI,CAACC,GAAI2B,GAAOjC,GACd,MAKb,gBAAC,EAAAK,KAAI,CAACC,GAAG,SAAQ,aAEZ,EA6BN,MAAM+B,EAAO,IAAM,gBAAC,IAAG,CAACrC,MAAM,M","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">\r\n        <Link className=\"heading-link\" to=\"/\">{title}</Link>\r\n\r\n        <div className=\"global-header-spacing\"></div>\r\n\r\n        <div className=\"global-header-action\">\r\n          <Link className=\"heading-link\" to=\"/\">首頁</Link>\r\n          <Link className=\"heading-link\" to=\"/tags\">標籤</Link>\r\n          <Link className=\"heading-link\" to=\"/about\">關於</Link>\r\n        </div>\r\n      </header>\r\n      <main className=\"global-main\">{children}</main>\r\n      <footer className=\"global-footer\">\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst Tags = ({ pageContext, data, location }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  } tagged with \"${tag}\"`\r\n\r\n  const siteTitle = data?.site?.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1>{tagHeader}</h1>\r\n        </header>\r\n        <section>\r\n          <ul>\r\n            {edges.map(({ node }) => {\r\n              const { slug } = node.fields\r\n              const { title } = node.frontmatter\r\n              return (\r\n                <li key={slug}>\r\n                  <Link to={slug}>{title}</Link>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </section>\r\n        <Link to=\"/tags\">All tags</Link>\r\n      </article>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const Head = () => <Seo title=\"標籤\" />\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { frontmatter: { date: DESC }}\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["location","title","children","isRootPath","pathname","className","Link","to","Date","getFullYear","href","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","pageContext","data","tag","edges","totalCount","allMarkdownRemark","tagHeader","siteTitle","itemScope","itemType","map","node","slug","fields","frontmatter","key","Head"],"sourceRoot":""}